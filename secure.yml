# Elasticsearch monitoring stack for docker swarm


version: '3.8'


configs:
  logstash_config:
    external: true
  kibana_config:
    external: true
  # metricbeat_config:
  #   external: true

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  logstash-pipeline:
    driver: local

networks:
  private:
  public:
  traefik-public:
    external: true

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    deploy:
      placement:
        constraints:
          - node.labels.elastic == 1
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    networks:
      - private    
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
            echo "Creating CA";
            bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
            unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
            echo "Creating certs";
            echo -ne \
            "instances:\n"\
            "  - name: es01\n"\
            "    dns:\n"\
            "      - es01\n"\
            "      - localhost\n"\
            "    ip:\n"\
            "      - 127.0.0.1\n"\
            > config/certs/instances.yml;
            bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
            unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '

  # metricbeat:
  #   image: docker.elastic.co/beats/metricbeat:8.2.3
  #   user: root
  #   hostname: "{{.Node.Hostname}}-{{.Service.Name}}"
  #   configs:
  #     - source: metricbeat-config
  #       target: /usr/share/metricbeat/metricbeat.yml
  #   command:
  #     - -e
  #     - --strict.perms=false
  #     - --system.hostfs=/hostfs
  #   volumes:
  #     - type: bind
  #       source: /
  #       target: /hostfs
  #       read_only: true
  #     - type: bind
  #       source: /sys/fs/cgroup
  #       target: /hostfs/sys/fs/cgroup
  #       read_only: true
  #     - type: bind
  #       source: /proc
  #       target: /hostfs/proc
  #       read_only: true
  #     - type: bind
  #       source: /var/run/docker.sock
  #       target: /var/run/docker.sock
  #       read_only: true
  #   deploy:
  #     mode: global

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    deploy:
      resources:
        limits:
          cpus: '3'
          memory: 3000M
      placement:
        constraints:
          - node.labels.elastic == 1

    environment:
      # - node.name=es01
      # - cluster.name=${CLUSTER_NAME}
      #- cluster.initial_master_nodes=es01
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}      
    networks:
      - private
      - public
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    configs:
      - source: kibana_config
        target: /usr/share/kibana/config/kibana.yml
    networks:
      - private
      - traefik-public
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt    
    deploy:
      placement:
        constraints:
          - node.labels.elastic == 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.swarmprom-kibana-http.rule=Host(`kibana.${DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmprom-kibana-http.entrypoints=http
        - traefik.http.routers.swarmprom-kibana-http.middlewares=https-redirect
        - traefik.http.routers.swarmprom-kibana-https.rule=Host(`kibana.${DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmprom-kibana-https.entrypoints=https
        - traefik.http.routers.swarmprom-kibana-https.tls=true
        - traefik.http.routers.swarmprom-kibana-https.tls.certresolver=le
        - traefik.http.services.swarmprom-kibana.loadbalancer.server.port=5601
        #- traefik.http.middlewares.swarmprom-kibana-auth.basicauth.users=${ADMIN_USER?Variable not set}:${HASHED_PASSWORD?Variable not set}
        #- traefik.http.routers.swarmprom-kibana-https.middlewares=swarmprom-kibana-auth    
        
  logstash:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    ports:
      - "12201:12201/udp"
    networks:
      - private
    deploy:
      mode: global
    configs:
      - source: logstash_config
        target: /usr/share/logstash/pipeline/logstash.conf
    volumes:
      - logstash-pipeline:/usr/share/logstash/pipeline/

